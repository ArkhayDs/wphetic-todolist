{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Limiter(_ref) {\n  _s();\n\n  let {\n    cards\n  } = _ref;\n  const [count, setCount] = useState(0);\n  useEffect(() => {\n    // ce que je veux : map cards -> count++ si status === 0. Si count > 10 -> STOP\n    console.log(cards.indexOf(cards.status === false), \"que ?\");\n    /*if(count < 10) {\n        cards.map(e => {\n            if (e.status === false) {\n                setCount(prev => [...prev, count + 1]);\n            }\n        });\n    }*/\n\n    return () => {//alert(\"oh wtf guy, there is too many tasks. Please take care of them first ! xoxo\");\n    };\n  }, [cards]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_s(Limiter, \"/xL7qdScToREtqzbt5GZ1kHtYjQ=\");\n\n_c = Limiter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Limiter\");","map":{"version":3,"sources":["/Users/kavalier.e.39/Documents/HETIC/Front/React/Todo/src/Middleware/Limiter.js"],"names":["useEffect","useState","Limiter","cards","count","setCount","console","log","indexOf","status"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;;AAEA,eAAe,SAASC,OAAT,OAA0B;AAAA;;AAAA,MAAT;AAACC,IAAAA;AAAD,GAAS;AAErC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAAC,CAAD,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACK,OAAN,CAAcL,KAAK,CAACM,MAAN,KAAiB,KAA/B,CAAZ,EAAmD,OAAnD;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AACQ,WAAO,MAAM,CACT;AACH,KAFD;AAGH,GAbQ,EAaN,CAACN,KAAD,CAbM,CAAT;AAeA,sBACI,qCADJ;AAGH;;GAtBuBD,O;;KAAAA,O","sourcesContent":["import {useEffect, useState} from \"react\";\n\nexport default function Limiter({cards}) {\n\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        // ce que je veux : map cards -> count++ si status === 0. Si count > 10 -> STOP\n        console.log(cards.indexOf(cards.status === false), \"que ?\");\n        /*if(count < 10) {\n            cards.map(e => {\n                if (e.status === false) {\n                    setCount(prev => [...prev, count + 1]);\n                }\n            });\n        }*/\n        return () => {\n            //alert(\"oh wtf guy, there is too many tasks. Please take care of them first ! xoxo\");\n        };\n    }, [cards]);\n\n    return (\n        <></>\n    )\n}"]},"metadata":{},"sourceType":"module"}